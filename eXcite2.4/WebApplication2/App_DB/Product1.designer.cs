#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2.App_DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="stitchDB")]
	public partial class ProductDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCPizzaIngredient(CPizzaIngredient instance);
    partial void UpdateCPizzaIngredient(CPizzaIngredient instance);
    partial void DeleteCPizzaIngredient(CPizzaIngredient instance);
    partial void InsertPizza(Pizza instance);
    partial void UpdatePizza(Pizza instance);
    partial void DeletePizza(Pizza instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    #endregion
		
		public ProductDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["stitchDBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProductDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProductDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProductDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProductDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CPizzaIngredient> CPizzaIngredients
		{
			get
			{
				return this.GetTable<CPizzaIngredient>();
			}
		}
		
		public System.Data.Linq.Table<Pizza> Pizzas
		{
			get
			{
				return this.GetTable<Pizza>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
	}
	
	[Table(Name="dbo.CPizzaIngredient")]
	public partial class CPizzaIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PizzaID;
		
		private int _IngredientID;
		
		private int _Quantity;
		
		private int _ConnectionID;
		
		private EntitySet<Ingredient> _Ingredients;
		
		private EntityRef<Pizza> _Pizza;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPizzaIDChanging(int value);
    partial void OnPizzaIDChanged();
    partial void OnIngredientIDChanging(int value);
    partial void OnIngredientIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnConnectionIDChanging(int value);
    partial void OnConnectionIDChanged();
    #endregion
		
		public CPizzaIngredient()
		{
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			this._Pizza = default(EntityRef<Pizza>);
			OnCreated();
		}
		
		[Column(Storage="_PizzaID", DbType="Int NOT NULL")]
		public int PizzaID
		{
			get
			{
				return this._PizzaID;
			}
			set
			{
				if ((this._PizzaID != value))
				{
					if (this._Pizza.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPizzaIDChanging(value);
					this.SendPropertyChanging();
					this._PizzaID = value;
					this.SendPropertyChanged("PizzaID");
					this.OnPizzaIDChanged();
				}
			}
		}
		
		[Column(Storage="_IngredientID", DbType="Int NOT NULL")]
		public int IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ConnectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConnectionID
		{
			get
			{
				return this._ConnectionID;
			}
			set
			{
				if ((this._ConnectionID != value))
				{
					this.OnConnectionIDChanging(value);
					this.SendPropertyChanging();
					this._ConnectionID = value;
					this.SendPropertyChanged("ConnectionID");
					this.OnConnectionIDChanged();
				}
			}
		}
		
		[Association(Name="CPizzaIngredient_Ingredient", Storage="_Ingredients", ThisKey="IngredientID", OtherKey="IngredientID")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		[Association(Name="Pizza_CPizzaIngredient", Storage="_Pizza", ThisKey="PizzaID", IsForeignKey=true)]
		public Pizza Pizza
		{
			get
			{
				return this._Pizza.Entity;
			}
			set
			{
				Pizza previousValue = this._Pizza.Entity;
				if (((previousValue != value) 
							|| (this._Pizza.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pizza.Entity = null;
						previousValue.CPizzaIngredients.Remove(this);
					}
					this._Pizza.Entity = value;
					if ((value != null))
					{
						value.CPizzaIngredients.Add(this);
						this._PizzaID = value.PizzaID;
					}
					else
					{
						this._PizzaID = default(int);
					}
					this.SendPropertyChanged("Pizza");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.CPizzaIngredient = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.CPizzaIngredient = null;
		}
	}
	
	[Table(Name="dbo.Pizza")]
	public partial class Pizza : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PizzaID;
		
		private string _Nume;
		
		private double _Gramaj;
		
		private double _UnitPrice;
		
		private EntitySet<CPizzaIngredient> _CPizzaIngredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPizzaIDChanging(int value);
    partial void OnPizzaIDChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnGramajChanging(double value);
    partial void OnGramajChanged();
    partial void OnUnitPriceChanging(double value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public Pizza()
		{
			this._CPizzaIngredients = new EntitySet<CPizzaIngredient>(new Action<CPizzaIngredient>(this.attach_CPizzaIngredients), new Action<CPizzaIngredient>(this.detach_CPizzaIngredients));
			OnCreated();
		}
		
		[Column(Storage="_PizzaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PizzaID
		{
			get
			{
				return this._PizzaID;
			}
			set
			{
				if ((this._PizzaID != value))
				{
					this.OnPizzaIDChanging(value);
					this.SendPropertyChanging();
					this._PizzaID = value;
					this.SendPropertyChanged("PizzaID");
					this.OnPizzaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nume", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[Column(Storage="_Gramaj", DbType="Float NOT NULL")]
		public double Gramaj
		{
			get
			{
				return this._Gramaj;
			}
			set
			{
				if ((this._Gramaj != value))
				{
					this.OnGramajChanging(value);
					this.SendPropertyChanging();
					this._Gramaj = value;
					this.SendPropertyChanged("Gramaj");
					this.OnGramajChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Float NOT NULL")]
		public double UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="Pizza_CPizzaIngredient", Storage="_CPizzaIngredients", OtherKey="PizzaID")]
		public EntitySet<CPizzaIngredient> CPizzaIngredients
		{
			get
			{
				return this._CPizzaIngredients;
			}
			set
			{
				this._CPizzaIngredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CPizzaIngredients(CPizzaIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Pizza = this;
		}
		
		private void detach_CPizzaIngredients(CPizzaIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Pizza = null;
		}
	}
	
	[Table(Name="dbo.Ingredients")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IngredientID;
		
		private string _Name;
		
		private string _Ambalaj;
		
		private System.Nullable<double> _UnitPrice;
		
		private string _Incompatibilities;
		
		private EntityRef<CPizzaIngredient> _CPizzaIngredient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientIDChanging(int value);
    partial void OnIngredientIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAmbalajChanging(string value);
    partial void OnAmbalajChanged();
    partial void OnUnitPriceChanging(System.Nullable<double> value);
    partial void OnUnitPriceChanged();
    partial void OnIncompatibilitiesChanging(string value);
    partial void OnIncompatibilitiesChanged();
    #endregion
		
		public Ingredient()
		{
			this._CPizzaIngredient = default(EntityRef<CPizzaIngredient>);
			OnCreated();
		}
		
		[Column(Storage="_IngredientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					if (this._CPizzaIngredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Ambalaj", DbType="NChar(10)")]
		public string Ambalaj
		{
			get
			{
				return this._Ambalaj;
			}
			set
			{
				if ((this._Ambalaj != value))
				{
					this.OnAmbalajChanging(value);
					this.SendPropertyChanging();
					this._Ambalaj = value;
					this.SendPropertyChanged("Ambalaj");
					this.OnAmbalajChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Float")]
		public System.Nullable<double> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Incompatibilities", DbType="NVarChar(50)")]
		public string Incompatibilities
		{
			get
			{
				return this._Incompatibilities;
			}
			set
			{
				if ((this._Incompatibilities != value))
				{
					this.OnIncompatibilitiesChanging(value);
					this.SendPropertyChanging();
					this._Incompatibilities = value;
					this.SendPropertyChanged("Incompatibilities");
					this.OnIncompatibilitiesChanged();
				}
			}
		}
		
		[Association(Name="CPizzaIngredient_Ingredient", Storage="_CPizzaIngredient", ThisKey="IngredientID", OtherKey="IngredientID", IsForeignKey=true)]
		public CPizzaIngredient CPizzaIngredient
		{
			get
			{
				return this._CPizzaIngredient.Entity;
			}
			set
			{
				CPizzaIngredient previousValue = this._CPizzaIngredient.Entity;
				if (((previousValue != value) 
							|| (this._CPizzaIngredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CPizzaIngredient.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._CPizzaIngredient.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._IngredientID = value.IngredientID;
					}
					else
					{
						this._IngredientID = default(int);
					}
					this.SendPropertyChanged("CPizzaIngredient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _Name;
		
		private string _Password;
		
		private string _Address;
		
		private string _City;
		
		private bool _IsAdmin;
		
		private string _Email;
		
		private System.Nullable<bool> _Banned;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBannedChanging(System.Nullable<bool> value);
    partial void OnBannedChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Banned", DbType="Bit")]
		public System.Nullable<bool> Banned
		{
			get
			{
				return this._Banned;
			}
			set
			{
				if ((this._Banned != value))
				{
					this.OnBannedChanging(value);
					this.SendPropertyChanging();
					this._Banned = value;
					this.SendPropertyChanged("Banned");
					this.OnBannedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.DateTime _Date;
		
		private string _Address;
		
		private string _City;
		
		private string _Order1;
		
		private string _UserID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnOrder1Changing(string value);
    partial void OnOrder1Changed();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    #endregion
		
		public Order()
		{
			OnCreated();
		}
		
		[Column(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Order1
		{
			get
			{
				return this._Order1;
			}
			set
			{
				if ((this._Order1 != value))
				{
					this.OnOrder1Changing(value);
					this.SendPropertyChanging();
					this._Order1 = value;
					this.SendPropertyChanged("Order1");
					this.OnOrder1Changed();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
