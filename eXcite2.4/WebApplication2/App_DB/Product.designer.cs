#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="stitchDB")]
public partial class ProductDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCoffee(Coffee instance);
  partial void UpdateCoffee(Coffee instance);
  partial void DeleteCoffee(Coffee instance);
  partial void InsertIngredient(Ingredient instance);
  partial void UpdateIngredient(Ingredient instance);
  partial void DeleteIngredient(Ingredient instance);
  partial void InsertMenus(Menus instance);
  partial void UpdateMenus(Menus instance);
  partial void DeleteMenus(Menus instance);
  partial void InsertRefreshment(Refreshment instance);
  partial void UpdateRefreshment(Refreshment instance);
  partial void DeleteRefreshment(Refreshment instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public ProductDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["stitchDBConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ProductDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ProductDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ProductDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ProductDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Coffee> Coffees
	{
		get
		{
			return this.GetTable<Coffee>();
		}
	}
	
	public System.Data.Linq.Table<Ingredient> Ingredients
	{
		get
		{
			return this.GetTable<Ingredient>();
		}
	}
	
	public System.Data.Linq.Table<Menus> Menus
	{
		get
		{
			return this.GetTable<Menus>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Refreshment> Refreshments
	{
		get
		{
			return this.GetTable<Refreshment>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[Table(Name="dbo.Coffees")]
public partial class Coffee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _CoffeeID;
	
	private string _Name;
	
	private string _CupType;
	
	private bool _Milk;
	
	private double _UnitPrice;
	
	private EntityRef<Menus> _Menus;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoffeeIDChanging(string value);
    partial void OnCoffeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCupTypeChanging(string value);
    partial void OnCupTypeChanged();
    partial void OnMilkChanging(bool value);
    partial void OnMilkChanged();
    partial void OnUnitPriceChanging(double value);
    partial void OnUnitPriceChanged();
    #endregion
	
	public Coffee()
	{
		this._Menus = default(EntityRef<Menus>);
		OnCreated();
	}
	
	[Column(Storage="_CoffeeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string CoffeeID
	{
		get
		{
			return this._CoffeeID;
		}
		set
		{
			if ((this._CoffeeID != value))
			{
				if (this._Menus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCoffeeIDChanging(value);
				this.SendPropertyChanging();
				this._CoffeeID = value;
				this.SendPropertyChanged("CoffeeID");
				this.OnCoffeeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_CupType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CupType
	{
		get
		{
			return this._CupType;
		}
		set
		{
			if ((this._CupType != value))
			{
				this.OnCupTypeChanging(value);
				this.SendPropertyChanging();
				this._CupType = value;
				this.SendPropertyChanged("CupType");
				this.OnCupTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Milk", DbType="Bit NOT NULL")]
	public bool Milk
	{
		get
		{
			return this._Milk;
		}
		set
		{
			if ((this._Milk != value))
			{
				this.OnMilkChanging(value);
				this.SendPropertyChanging();
				this._Milk = value;
				this.SendPropertyChanged("Milk");
				this.OnMilkChanged();
			}
		}
	}
	
	[Column(Storage="_UnitPrice", DbType="Float NOT NULL")]
	public double UnitPrice
	{
		get
		{
			return this._UnitPrice;
		}
		set
		{
			if ((this._UnitPrice != value))
			{
				this.OnUnitPriceChanging(value);
				this.SendPropertyChanging();
				this._UnitPrice = value;
				this.SendPropertyChanged("UnitPrice");
				this.OnUnitPriceChanged();
			}
		}
	}
	
	[Association(Name="Menus_Coffee", Storage="_Menus", ThisKey="CoffeeID", IsForeignKey=true)]
	public Menus Menus
	{
		get
		{
			return this._Menus.Entity;
		}
		set
		{
			Menus previousValue = this._Menus.Entity;
			if (((previousValue != value) 
						|| (this._Menus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Menus.Entity = null;
					previousValue.Coffees = null;
				}
				this._Menus.Entity = value;
				if ((value != null))
				{
					value.Coffees = this;
					this._CoffeeID = value.MenuID;
				}
				else
				{
					this._CoffeeID = default(string);
				}
				this.SendPropertyChanged("Menus");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Ingredients")]
public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _IngredientID;
	
	private string _Name;
	
	private string _Ambalaj;
	
	private double _Unitprice;
	
	private string _Incompatibilities;
	
	private EntityRef<Menus> _Menus;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientIDChanging(string value);
    partial void OnIngredientIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAmbalajChanging(string value);
    partial void OnAmbalajChanged();
    partial void OnUnitpriceChanging(double value);
    partial void OnUnitpriceChanged();
    partial void OnIncompatibilitiesChanging(string value);
    partial void OnIncompatibilitiesChanged();
    #endregion
	
	public Ingredient()
	{
		this._Menus = default(EntityRef<Menus>);
		OnCreated();
	}
	
	[Column(Storage="_IngredientID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string IngredientID
	{
		get
		{
			return this._IngredientID;
		}
		set
		{
			if ((this._IngredientID != value))
			{
				if (this._Menus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIngredientIDChanging(value);
				this.SendPropertyChanging();
				this._IngredientID = value;
				this.SendPropertyChanged("IngredientID");
				this.OnIngredientIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Ambalaj", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Ambalaj
	{
		get
		{
			return this._Ambalaj;
		}
		set
		{
			if ((this._Ambalaj != value))
			{
				this.OnAmbalajChanging(value);
				this.SendPropertyChanging();
				this._Ambalaj = value;
				this.SendPropertyChanged("Ambalaj");
				this.OnAmbalajChanged();
			}
		}
	}
	
	[Column(Storage="_Unitprice", DbType="Float NOT NULL")]
	public double Unitprice
	{
		get
		{
			return this._Unitprice;
		}
		set
		{
			if ((this._Unitprice != value))
			{
				this.OnUnitpriceChanging(value);
				this.SendPropertyChanging();
				this._Unitprice = value;
				this.SendPropertyChanged("Unitprice");
				this.OnUnitpriceChanged();
			}
		}
	}
	
	[Column(Storage="_Incompatibilities", DbType="NVarChar(50)")]
	public string Incompatibilities
	{
		get
		{
			return this._Incompatibilities;
		}
		set
		{
			if ((this._Incompatibilities != value))
			{
				this.OnIncompatibilitiesChanging(value);
				this.SendPropertyChanging();
				this._Incompatibilities = value;
				this.SendPropertyChanged("Incompatibilities");
				this.OnIncompatibilitiesChanged();
			}
		}
	}
	
	[Association(Name="Menus_Ingredient", Storage="_Menus", ThisKey="IngredientID", IsForeignKey=true)]
	public Menus Menus
	{
		get
		{
			return this._Menus.Entity;
		}
		set
		{
			Menus previousValue = this._Menus.Entity;
			if (((previousValue != value) 
						|| (this._Menus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Menus.Entity = null;
					previousValue.Ingredients = null;
				}
				this._Menus.Entity = value;
				if ((value != null))
				{
					value.Ingredients = this;
					this._IngredientID = value.MenuID;
				}
				else
				{
					this._IngredientID = default(string);
				}
				this.SendPropertyChanged("Menus");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Menus")]
public partial class Menus : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _MenuID;
	
	private string _Name;
	
	private EntityRef<Coffee> _Coffees;
	
	private EntityRef<Ingredient> _Ingredients;
	
	private EntityRef<Refreshment> _Refreshments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(string value);
    partial void OnMenuIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Menus()
	{
		this._Coffees = default(EntityRef<Coffee>);
		this._Ingredients = default(EntityRef<Ingredient>);
		this._Refreshments = default(EntityRef<Refreshment>);
		OnCreated();
	}
	
	[Column(Storage="_MenuID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string MenuID
	{
		get
		{
			return this._MenuID;
		}
		set
		{
			if ((this._MenuID != value))
			{
				this.OnMenuIDChanging(value);
				this.SendPropertyChanging();
				this._MenuID = value;
				this.SendPropertyChanged("MenuID");
				this.OnMenuIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Menus_Coffee", Storage="_Coffees", ThisKey="MenuID", IsUnique=true, IsForeignKey=false)]
	public Coffee Coffees
	{
		get
		{
			return this._Coffees.Entity;
		}
		set
		{
			Coffee previousValue = this._Coffees.Entity;
			if (((previousValue != value) 
						|| (this._Coffees.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Coffees.Entity = null;
					previousValue.Menus = null;
				}
				this._Coffees.Entity = value;
				if ((value != null))
				{
					value.Menus = this;
				}
				this.SendPropertyChanged("Coffees");
			}
		}
	}
	
	[Association(Name="Menus_Ingredient", Storage="_Ingredients", ThisKey="MenuID", IsUnique=true, IsForeignKey=false)]
	public Ingredient Ingredients
	{
		get
		{
			return this._Ingredients.Entity;
		}
		set
		{
			Ingredient previousValue = this._Ingredients.Entity;
			if (((previousValue != value) 
						|| (this._Ingredients.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Ingredients.Entity = null;
					previousValue.Menus = null;
				}
				this._Ingredients.Entity = value;
				if ((value != null))
				{
					value.Menus = this;
				}
				this.SendPropertyChanged("Ingredients");
			}
		}
	}
	
	[Association(Name="Menus_Refreshment", Storage="_Refreshments", ThisKey="MenuID", IsUnique=true, IsForeignKey=false)]
	public Refreshment Refreshments
	{
		get
		{
			return this._Refreshments.Entity;
		}
		set
		{
			Refreshment previousValue = this._Refreshments.Entity;
			if (((previousValue != value) 
						|| (this._Refreshments.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Refreshments.Entity = null;
					previousValue.Menus = null;
				}
				this._Refreshments.Entity = value;
				if ((value != null))
				{
					value.Menus = this;
				}
				this.SendPropertyChanged("Refreshments");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Orders")]
public partial class Order
{
	
	private string _OrderID;
	
	private System.DateTime _Date;
	
	private string _DelivererID;
	
	private string _Address;
	
	private string _City;
	
	public Order()
	{
	}
	
	[Column(Storage="_OrderID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this._OrderID = value;
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this._Date = value;
			}
		}
	}
	
	[Column(Storage="_DelivererID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DelivererID
	{
		get
		{
			return this._DelivererID;
		}
		set
		{
			if ((this._DelivererID != value))
			{
				this._DelivererID = value;
			}
		}
	}
	
	[Column(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this._Address = value;
			}
		}
	}
	
	[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this._City = value;
			}
		}
	}
}

[Table(Name="dbo.Refreshments")]
public partial class Refreshment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _RefreshmentId;
	
	private double _QuantityPerUnit;
	
	private double _UnitPrice;
	
	private string _Name;
	
	private EntityRef<Menus> _Menus;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefreshmentIdChanging(string value);
    partial void OnRefreshmentIdChanged();
    partial void OnQuantityPerUnitChanging(double value);
    partial void OnQuantityPerUnitChanged();
    partial void OnUnitPriceChanging(double value);
    partial void OnUnitPriceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Refreshment()
	{
		this._Menus = default(EntityRef<Menus>);
		OnCreated();
	}
	
	[Column(Storage="_RefreshmentId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string RefreshmentId
	{
		get
		{
			return this._RefreshmentId;
		}
		set
		{
			if ((this._RefreshmentId != value))
			{
				if (this._Menus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRefreshmentIdChanging(value);
				this.SendPropertyChanging();
				this._RefreshmentId = value;
				this.SendPropertyChanged("RefreshmentId");
				this.OnRefreshmentIdChanged();
			}
		}
	}
	
	[Column(Storage="_QuantityPerUnit", DbType="Float NOT NULL")]
	public double QuantityPerUnit
	{
		get
		{
			return this._QuantityPerUnit;
		}
		set
		{
			if ((this._QuantityPerUnit != value))
			{
				this.OnQuantityPerUnitChanging(value);
				this.SendPropertyChanging();
				this._QuantityPerUnit = value;
				this.SendPropertyChanged("QuantityPerUnit");
				this.OnQuantityPerUnitChanged();
			}
		}
	}
	
	[Column(Storage="_UnitPrice", DbType="Float NOT NULL")]
	public double UnitPrice
	{
		get
		{
			return this._UnitPrice;
		}
		set
		{
			if ((this._UnitPrice != value))
			{
				this.OnUnitPriceChanging(value);
				this.SendPropertyChanging();
				this._UnitPrice = value;
				this.SendPropertyChanged("UnitPrice");
				this.OnUnitPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Menus_Refreshment", Storage="_Menus", ThisKey="RefreshmentId", IsForeignKey=true)]
	public Menus Menus
	{
		get
		{
			return this._Menus.Entity;
		}
		set
		{
			Menus previousValue = this._Menus.Entity;
			if (((previousValue != value) 
						|| (this._Menus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Menus.Entity = null;
					previousValue.Refreshments = null;
				}
				this._Menus.Entity = value;
				if ((value != null))
				{
					value.Refreshments = this;
					this._RefreshmentId = value.MenuID;
				}
				else
				{
					this._RefreshmentId = default(string);
				}
				this.SendPropertyChanged("Menus");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserID;
	
	private string _Name;
	
	private string _Password;
	
	private string _Address;
	
	private string _City;
	
	private bool _IsAdmin;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[Column(Storage="_UserID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="boolean NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
	public bool IsAdmin
	{
		get
		{
			return this._IsAdmin;
		}
		set
		{
			if ((this._IsAdmin != value))
			{
				this.OnIsAdminChanging(value);
				this.SendPropertyChanging();
				this._IsAdmin = value;
				this.SendPropertyChanged("IsAdmin");
				this.OnIsAdminChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
